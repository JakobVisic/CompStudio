/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 new-setup.glb
*/

import React, { useRef, useState, useContext } from 'react'
import { useGLTF, shaderMaterial, Html } from '@react-three/drei'
import { extend } from '@react-three/fiber'
import * as THREE from 'three'
import MyContext from '../MyContext';


import {getProject} from '@theatre/core'
import {editable as e, SheetProvider, PerspectiveCamera} from '@theatre/r3f'
import demoProjectState from '/state.json'


import studio from '@theatre/studio'
// import extension from '@theatre/r3f/dist/extension'
// studio.initialize()
// studio.extend(extension)

// const bookSheet = getProject('Demo Project', {state: demoProjectState}).sheet('Book Sheet')

export function NewSetupModel(props) {
  const { nodes, materials } = useGLTF('/model/new-setup.glb')
  const [hoverBooks, setHoverBooks] = useState(false) 

  // const {
  //   bookModeOn,
  //   rightbookModeOn,
  //   // deskModeOn,
  //   mugModeOn,
  //   phoneModeOn,
  //   setBookModeOn,
  //   setRightbookModeOn,
  //   // setDeskModeOn,
  //   setMugModeOn,
  //   setPhoneModeOn,
  // } = useContext(MyContext);

  // let bookModeOn = false;
  // let rightbookModeOn = false;
  // let deskModeOn = false;
  // let mugModeOn = false;
  // let phoneModeOn = false;

  const {deskModeOn, setDeskModeOn} = useContext(MyContext);
  const {phoneModeOn, setPhoneModeOn} = useContext(MyContext);
  const {rightbookModeOn, setRightBookModeOn} = useContext(MyContext);
  const {bookModeOn, setBookModeOn} = useContext(MyContext);
  const {mugModeOn, setMugModeOn} = useContext(MyContext);
  // const [deskModeOn, setDeskModeOn] = useState(false);
  // const [deskModeOn, setDeskModeOn] = useState(false);
  // const [deskModeOn, setDeskModeOn] = useState(false);

  return (

    <SheetProvider 
    sheet={getProject('Demo Project', {state: demoProjectState}).sheet('Demo Sheet')}
  >
    <group {...props} dispose={null}>

       // desk
        <e.mesh 
          theatreKey="Desk"
          geometry={nodes.Desk.geometry} 
          material={materials.Desk} 
          scale={0.2}
          onClick={ (e) => 
          { 
            e.stopPropagation(); 
            if(deskModeOn == false)
            {
              demoSheet.project.ready.then(() => demoSheet.sequence.play({
                iterationCount: 1, 
                range: [0, 2]
              }))
              setDeskModeOn(true)
              console.log('deskMode = ' + deskModeOn);
            } 
            else if (deskModeOn == true)
            {
              demoSheet.project.ready.then(() => demoSheet.sequence.play({
                iterationCount: 1, 
                range: [22, 24]
              }))
              setDeskModeOn(false)
              console.log('deskMode = ' + deskModeOn);
            }
          }
        }
      />

      // fold z
      <e.group theatreKey="phone" position={[0.12, 0.41, -0.31]} rotation={[-Math.PI, -1.03, 0]} scale={0.81}
        onClick=
        { (e) => 
          { 
            e.stopPropagation(); 
            if(phoneModeOn == false && deskModeOn == true)
            {
              demoSheet.project.ready.then(() => demoSheet.sequence.play({
                iterationCount: 1, 
                range: [14, 16]
              }))
              setPhoneModeOn(true)
            } 
            else if (phoneModeOn == true )
            {
              demoSheet.project.ready.then(() => demoSheet.sequence.play({
                iterationCount: 1, 
                range: [16, 18]
              }))
              setPhoneModeOn(false)
            }
          }
        }
      >
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh geometry={nodes.Back_Cam_Cover.geometry} material={materials.Cam_Case} />
          <mesh geometry={nodes.Back_Cover_Glass.geometry} material={materials.Back_Panel} />
          <mesh geometry={nodes.Cam.geometry} material={materials.Cam_Mt} />
          <mesh geometry={nodes.Cam_Glass.geometry} material={materials.Cam_Glass} />
          <mesh geometry={nodes.Cam_Lens.geometry} material={materials.material} />
          <mesh geometry={nodes.Cam_Mt2.geometry} material={materials.Cam_ring} />
          <mesh geometry={nodes.Cam_Rearcase.geometry} material={materials.Cam_Rearcase} />
          <mesh geometry={nodes.Display_ActiveArea.geometry} material={materials.Display_ActiveArea} />
          <mesh geometry={nodes.Display_ActiveArea_cam.geometry} material={materials.Display_ActiveArea_cam} />
          <mesh geometry={nodes.Display_ActiveArea_Front.geometry} material={materials.Display_ActiveArea_Front} />
          <mesh geometry={nodes.Flash.geometry} material={materials.Flash} />
          <mesh geometry={nodes.Flash_Glass.geometry} material={materials.Flash_Glass} />
          <mesh geometry={nodes.Hinge.geometry} material={materials.Hinge} />
          <mesh geometry={nodes.Hinge_2.geometry} material={materials.Hinge_2} />
          <mesh geometry={nodes.Left_Antenna_Plastic.geometry} material={materials.Antenna_Plastic} />
          <mesh geometry={nodes.Left_Bezel.geometry} material={materials.Bezel} />
          <mesh geometry={nodes.Left_Black_Hole.geometry} material={materials.Black_Hole} />
          <mesh geometry={nodes.Left_Rearcase.geometry} material={materials.Rearcase} />
          <mesh geometry={nodes.Left_Rearcase_Hole.geometry} material={materials.Rearcase_Inside} />
          <mesh geometry={nodes.Logo_line.geometry} material={materials.Logo_line} />
          <mesh geometry={nodes.Right_Rearcase.geometry} material={materials.Rearcase} />
          <mesh geometry={nodes.SAMSUNG_LOGO.geometry} material={materials.SAMSUNG_LOGO} />
          <mesh geometry={nodes.Side_hold.geometry} material={materials.Black_Hole} />
          <mesh geometry={nodes.Usb_1.geometry} material={materials.Usb_1} />
          <mesh geometry={nodes.Usb_2.geometry} material={materials.Usb_2} />
        </group>
      </e.group>

      

      // right book
      <e.group theatreKey="right book" position={[-0.01, 0.41, -0.52]} rotation={[0, -0.31, 0]} scale={0.01}
        onClick={ (e) => 
          { 
            e.stopPropagation(); 
            if(rightbookModeOn == false && deskModeOn == true)
            {
              demoSheet.project.ready.then(() => demoSheet.sequence.play({
                iterationCount: 1, 
                range: [10, 12]
              }))
              setRightBookModeOn(true)
              // console.log(rightbookModeOn);
            } 
            else if (rightbookModeOn == true && deskModeOn == true)
            {
              demoSheet.project.ready.then(() => demoSheet.sequence.play({
                iterationCount: 1, 
                range: [12, 14]
              }))
              setRightBookModeOn(false)
            }
          }
        }
      >
        <mesh geometry={nodes.Cube.geometry} material={materials.book_a} />
        <mesh geometry={nodes.Cube_1.geometry} material={materials['Material.008']} />
      </e.group>

      // Stacked books
      <group position={[-0.1, 0.38, -0.09]} rotation={[0, Math.PI / 2, 0]} scale={0.01}>
        <mesh geometry={nodes.Cube007_1.geometry} material={materials.book_a} />
        <mesh geometry={nodes.Cube007_2.geometry} material={materials['Material.009']} />
      </group>

      // book left
      <e.group 
        theatreKey="left book" 
        position={[0.12, 0.41, 0.48]} 
        rotation={[0, 0.46, 0]} 
        scale={0.01}
        onClick=
        { (e) => 
          { 
            e.stopPropagation(); 
            if(bookModeOn == false && deskModeOn == true)
            {
              demoSheet.project.ready.then(() => demoSheet.sequence.play({
                iterationCount: 1, 
                range: [6, 8]
              }))
              setBookModeOn(true)
              console.log(bookModeOn);
            } 
            else if (bookModeOn == true )
            {
              demoSheet.project.ready.then(() => demoSheet.sequence.play({
                iterationCount: 1, 
                range: [8, 10]
              }))
              setBookModeOn(false)
            }
          }
        }
      >
        <group >
          <mesh geometry={nodes.Cube011_1.geometry} material={materials.book_a} />
          <mesh geometry={nodes.Cube011_2.geometry} material={materials.book_a_pages} />
        </group>
      </e.group>

      // no idea
      <group>
        <mesh geometry={nodes.Cube004.geometry} material={materials.book_a} position={[-0.101, 0.38, -0.09]} rotation={[0, Math.PI / 2, 0]} scale={0.01} />
      </group>

      // mug
      <e.group theatreKey="book left" position={[-0.09, 0.41, -0.31]} rotation={[Math.PI / 2, 0, 1.18]} scale={0.02}
        onClick=
        { (e) => 
          { 
            e.stopPropagation(); 
            if(mugModeOn == false && deskModeOn == true)
            {
              demoSheet.project.ready.then(() => demoSheet.sequence.play({
                iterationCount: 1, 
                range: [18, 20]
              }))
              setMugModeOn(true)
            } 
            else if (mugModeOn == true )
            {
              demoSheet.project.ready.then(() => demoSheet.sequence.play({
                iterationCount: 1, 
                range: [20, 22]
              }))
              setMugModeOn(false)
            }
          }
        }
      >
        <mesh geometry={nodes.Mesh002.geometry} material={materials.Mug} />
        <mesh geometry={nodes.Mesh002_1.geometry} material={materials.Coffee} />
      </e.group>

      // computer
      <group position={[-0.04, 0.66, 0]} scale={0.12}>
        <mesh geometry={nodes.Cube012.geometry} material={materials.Material} />
        <mesh geometry={nodes.Cube012_1.geometry} material={materials['Material.006']} />
      </group>

 
      </group>
      </SheetProvider>
  )

  
}

useGLTF.preload('/model/new-setup.glb')
